// Generated by dts-bundle-generator v4.0.0

export declare enum ElementTag {
	A = "a",
	ARTICLE = "article",
	AUDIO = "audio",
	B = "b",
	BASE = "base",
	BODY = "body",
	BR = "br",
	BUTTON = "button",
	CANVAS = "canvas",
	CAPTION = "caption",
	DIALOG = "dialog",
	DIV = "div",
	DL = "dl",
	DT = "dt",
	FIGURE = "figure",
	FOOTER = "footer",
	FORM = "form",
	H1 = "h1",
	H2 = "h2",
	H3 = "h3",
	H4 = "h4",
	H5 = "h5",
	H6 = "h6",
	HEAD = "head",
	HEADER = "header",
	HR = "hr",
	HTML = "html",
	I = "i",
	IFRAME = "iframe",
	IMG = "img",
	INPUT = "input",
	LABEL = "label",
	LI = "li",
	LINK = "link",
	MAIN = "main",
	META = "meta",
	NAV = "nav",
	OI = "oi",
	OPTGROUP = "optgroup",
	OPTION = "option",
	P = "p",
	PICTURE = "picture",
	PRE = "pre",
	PROGRESS = "progress",
	S = "s",
	SCRIPT = "script",
	SECTION = "section",
	SELECT = "select",
	SOURCE = "source",
	SPAN = "span",
	STRONG = "strong",
	STYLE = "style",
	SVG = "svg",
	TABLE = "table",
	TBODY = "tbody",
	TD = "td",
	TEXTAREA = "textarea",
	TFOOT = "tfoot",
	TH = "th",
	THEAD = "thead",
	TIME = "time",
	TITLE = "title",
	TR = "tr",
	U = "u",
	UL = "ul",
	VIDEO = "video"
}
export interface IVirtualDocumentEntry {
	doc: Document;
}
export interface IVirtualDocumentFindElementByIdOut {
	isFound: boolean;
	element: HTMLElement;
}
export interface IVirtualDocumentCreateNewElementIn {
	tagName: string | ElementTag;
}
export interface IVirtualDocumentCreateNewElementOut {
	element: HTMLElement;
}
export interface IVirtualDocumentFindElementsByTagNameInDocOut {
	elementCollection: HTMLCollection;
}
export interface IVirtualDocumentFindElementsByTagNameOut {
	elementCollection: HTMLCollection;
}
export interface IVirtualDocumentExportDocumentOut {
	doc: Document;
}
export interface IVirtualDocumentFindElementByIdIn {
	elementId: string;
}
export interface IVirtualDocumentSetIdIn {
	identifier: string;
	element: HTMLElement;
}
export interface IVirtualDocumentSetInnerHtmlIn {
	innerHtml: string;
	element: HTMLElement;
}
export interface IVirtualDocumentAppendToDocIn {
	element: HTMLElement;
}
export interface IVirtualDocumentAppendIn {
	appendTo: HTMLElement;
	element: HTMLElement | string;
}
export interface IVirtualDocumentFindElementsByTagNameInDocIn {
	tagName: string;
}
export interface IVirtualDocumentFindElementsByTagNameIn {
	element: HTMLElement;
	tagName: string;
}
export interface IVirtualDocumentSetAttributeIn {
	element: HTMLElement;
	attributeKey: string;
	attributeValue: string;
}
export interface IVirtualDocumentFindAttributeIn {
	element: HTMLElement;
	attributeKey: string;
}
export interface IVirtualDocumentFindAttributeOut {
	isFound: boolean;
	attributeValue: string;
}
export interface IVirtualDocumentFindFirstElementByQueryIn {
	query: string;
}
export interface IVirtualDocumentFindFirstElementByQueryOut {
	isFound: boolean;
	element: Element;
}
export interface IVirtualDocumentReplaceElementsIn<T extends Element> {
	sourceElement: T;
	replaceableElement: T;
}
export interface IVirtualDocumentGetParentElementIn {
	element: HTMLElement;
}
export interface IVirtualDocumentGetParentElementOut {
	isFound: boolean;
	parentElement: HTMLElement;
}
export declare class VirtualDocument {
	private readonly doc;
	constructor(entry?: IVirtualDocumentEntry);
	createNewElement(param: IVirtualDocumentCreateNewElementIn): IVirtualDocumentCreateNewElementOut;
	findElementById(param: IVirtualDocumentFindElementByIdIn): IVirtualDocumentFindElementByIdOut;
	appendToDoc(param: IVirtualDocumentAppendToDocIn): void;
	findElementsByTagNameInDoc(param: IVirtualDocumentFindElementsByTagNameInDocIn): IVirtualDocumentFindElementsByTagNameInDocOut;
	findFirstElementByQuery(param: IVirtualDocumentFindFirstElementByQueryIn): IVirtualDocumentFindFirstElementByQueryOut;
	exportDocument(): IVirtualDocumentExportDocumentOut;
	static append(param: IVirtualDocumentAppendIn): void;
	static setId(param: IVirtualDocumentSetIdIn): void;
	static setInnerHtml(param: IVirtualDocumentSetInnerHtmlIn): void;
	static findElementsByTagName(param: IVirtualDocumentFindElementsByTagNameIn): IVirtualDocumentFindElementsByTagNameOut;
	static replaceElements<T extends Element>(param: IVirtualDocumentReplaceElementsIn<T>): void;
	static setAttribute(param: IVirtualDocumentSetAttributeIn): void;
	static findAttribute(param: IVirtualDocumentFindAttributeIn): IVirtualDocumentFindAttributeOut;
	static getParentElement(param: IVirtualDocumentGetParentElementIn): IVirtualDocumentGetParentElementOut;
}
export interface IVirtualDocumentDemoEntry {
	virtualDocument: VirtualDocument;
}
export declare class VirtualDocumentDemo {
	private readonly virtualDocument;
	constructor(entry: IVirtualDocumentDemoEntry);
	createBase(): void;
}

export {};
